package com.example.volleybot.bot.messagehandler;

import com.example.volleybot.bot.BotState;
import com.example.volleybot.bot.cache.PlayerCache;
import com.example.volleybot.bot.service.SendMessageService;
import com.example.volleybot.bot.service.TimetableManager;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;

/**
 * Created by vkondratiev on 19.09.2021
 * Description:
 */
@Component
public class MainHandler implements IUpdateHandler {

    private final TimetableManager timetableManager;
    private final PlayerCache playerCache;
    private final SendMessageService messageService;

    public MainHandler(TimetableManager timetableManager,
                       PlayerCache playerCache,
                       SendMessageService messageService) {
        this.timetableManager = timetableManager;
        this.playerCache = playerCache;
        this.messageService = messageService;
    }

    @Override
    public boolean handle(Message message) {
        Long userId = message.getFrom().getId();
        boolean isAdmin = playerCache.isPlayerAdmin(userId);
        String messageText = message.getText();
        String[] split = messageText.split("[ @]");
        String command = split[0];
        if (isAdmin && "/dates".equals(command)) {
            timetableManager.manageDates();
        } else if (isAdmin && "/pin".equals(command)) {
            timetableManager.managePinnedMessage();
            playerCache.setUserBotState(userId, BotState.VISIT);
        } else {
            BotState state = BotState.of(command);
            if (state != BotState.MAIN) {
                playerCache.setUserBotState(userId, state);
                return false;
            }
        }
        sendMainMessage(userId);
        return true;
    }

    @Override
    public boolean handle(CallbackQuery callback) {
        Long userId = callback.getFrom().getId();
        sendMainMessage(userId);
        return true;
    }

    @Override
    public BotState state() {
        return BotState.MAIN;
    }

    void sendMainMessage(Long id) {
        boolean isAdmin = playerCache.isPlayerAdmin(id);
        messageService.sendMessage(id, null, getMainMessage(isAdmin));
    }

    private String getMainMessage(boolean isAdmin) {
        String msgText = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                üìù /visit - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É / –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
                üìÉ /list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                """;
        if (isAdmin) {
            msgText += """
                    üôãüèª /record - –∑–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
                    ‚úåÔ∏è /addCourt - –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É (–ª–∏–º–∏—Ç +12)
                    üôÖüèª‚Äç‚ôÇÔ∏è /removeCourt - —É–±—Ä–∞—Ç—å –ø–ª–æ—â–∞–¥–∫—É / –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É (–ª–∏–º–∏—Ç -12)
                    üìå /pin - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    üóìÔ∏è /dates - –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–∞—Ç
                    ‚úçÔ∏è /rename - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
                    ‚ùî /state - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    """;
        }
        return msgText;
    }
}
